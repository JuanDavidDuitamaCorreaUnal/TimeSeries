#setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")
#Data <- read.csv("DesempleoLimpio")[,c(2,4)]
#colnames(Data)<-c("AnioMes","TasaDesempleo")
#setwd("C:/Users/EQUIPO/OneDrive/Documentos/GitHub/TimeSeries/Proyecto/Desempleo")#Ander
setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")#Duitama
Data <- read_excel("Desempleo.xlsx", skip = 5, n_max = 276)
library(readxl)
Data <- read_excel("Desempleo.xlsx", skip = 5, n_max = 276)
#setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")
#Data <- read.csv("DesempleoLimpio")[,c(2,4)]
#colnames(Data)<-c("AnioMes","TasaDesempleo")
#setwd("C:/Users/EQUIPO/OneDrive/Documentos/GitHub/TimeSeries/Proyecto/Desempleo")#Ander
setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")#Duitama
#setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")
#Data <- read.csv("DesempleoLimpio")[,c(2,4)]
#colnames(Data)<-c("AnioMes","TasaDesempleo")
#setwd("C:/Users/EQUIPO/OneDrive/Documentos/GitHub/TimeSeries/Proyecto/Desempleo")#Ander
setwd("C:/Users/JUAN DAVID/Desktop/RepositoriosGitHub/TimeSeries/Proyecto/Desempleo")#Duitama
Data <- read_excel("Desempleo.xlsx", skip = 5, n_max = 276)
#setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")
#Data <- read.csv("DesempleoLimpio")[,c(2,4)]
#colnames(Data)<-c("AnioMes","TasaDesempleo")
#setwd("C:/Users/EQUIPO/OneDrive/Documentos/GitHub/TimeSeries/Proyecto/Desempleo")#Ander
#Data <- read_excel("Desempleo.xlsx", skip = 5, n_max = 276)
#Data <- subset(Data, select = -`Tasa de ocupación (%)`)
#colnames(Data)<-c("AnioMes","TasaDesempleo")
setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")
Data <- read.csv("DesempleoLimpio")[,c(2,4)]
View(Data)
#setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")
#Data <- read.csv("DesempleoLimpio")[,c(2,4)]
#colnames(Data)<-c("AnioMes","TasaDesempleo")
#setwd("C:/Users/EQUIPO/OneDrive/Documentos/GitHub/TimeSeries/Proyecto/Desempleo")#Ander
#Data <- read_excel("Desempleo.xlsx", skip = 5, n_max = 276)
#Data <- subset(Data, select = -`Tasa de ocupación (%)`)
setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")
Data <- read.csv("DesempleoLimpio")[,c(2,4)]
colnames(Data)<-c("AnioMes","TasaDesempleo")
View(Data)
#| messages: FALSE
#| warning: FALSE
library(plotly)
library(forecast)
library(MASS)
library(tidyverse)
library(lubridate)
library(timetk)
library(tibble)
library(zoo)
library(tsibble)
library(feasts)
library(fable)
library(cowplot)
library(astsa)
library(TSstudio)
library(fabletools)
library(TSA)
library(dplyr)
library(parsnip)
library(rsample)
library(modeltime)
library(tidymodels)
library(readxl)
#setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")
#Data <- read.csv("DesempleoLimpio")[,c(2,4)]
#colnames(Data)<-c("AnioMes","TasaDesempleo")
#setwd("C:/Users/EQUIPO/OneDrive/Documentos/GitHub/TimeSeries/Proyecto/Desempleo")#Ander
#Data <- read_excel("Desempleo.xlsx", skip = 5, n_max = 276)
#Data <- subset(Data, select = -`Tasa de ocupación (%)`)
setwd("D:/Estadística/Semestres/Semestre 9/Series de Tiempo Univariadas/Datos")
Data <- read.csv("DesempleoLimpio")[,c(2,4)]
colnames(Data)<-c("AnioMes","TasaDesempleo")
DesempleoTS <- ts(rev(Data$TasaDesempleo), start = c(2001, 1), end = c(2023, 12), frequency = 12)
plot_ly( x = time(DesempleoTS), y = DesempleoTS, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'Tasa de Desempleo en Colombia',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
acf(DesempleoTS,lag.max = length(DesempleoTS))
Lambda<-BoxCox.lambda(DesempleoTS, method ="loglik", lower = -3, upper = 3)#Encontrando el valor de Lambda
Lambda
DesempleoTSBox<-BoxCox(DesempleoTS,lambda = Lambda)#Transformando los datos
MASS::boxcox(lm(DesempleoTS ~ 1),seq(-3, 3, length = 50))
plot_ly( x = time(DesempleoTSBox), y = DesempleoTSBox, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'Tasa de Desempleo en Colombia Transformada',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
acf(DesempleoTSBox,lag.max = length(DesempleoTSBox))
summary(fitLM <- lm(DesempleoTS~time(DesempleoTS), na.action=NULL))#Creando un modelo de regresión lineal
plot(DesempleoTS, ylab="Tasa de Desempleo",xlab="Mes")
abline(fitLM,col = "red")
DesempNoLM=DesempleoTS-predict(fitLM)#Eliminando la tendencia
plot_ly( x = time(DesempNoLM), y = DesempNoLM, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'Tasa de Desempleo en Colombia con tendencia lineal extraída',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
indice1=as.Date(as.yearmon(tk_index(DesempleoTS)))#Convirtiendo en fecha el indice de DesempleoTS, deja como primero de enero cada fecha
indice1.1=yearmon(as.yearmon(tk_index(DesempleoTS)))#Dejando esa fecha solo como año y mes
## Haciendo el objeto tsibble
df=data.frame(Fecha=indice1,TransDesemp=as.matrix(DesempleoTS))
DesempTibbleTS=as_tsibble(df)
####Primera aproximación del ajuste STL
df%>%timetk::plot_time_series(Fecha, TransDesemp,
.interactive = TRUE,
.plotly_slider = TRUE)
#Creando una nueva columna con los datos ajustados por una regresión STL de grado 2 y utilizando el 20% de los datos, entre más pequeño, la curva es menos suave
###Ajuste STL moviendo los parámetros
df%>%mutate(TransDesemp_Mod=smooth_vec(TransDesemp,span = 0.2, degree = 2))%>%
ggplot(aes(Fecha, TransDesemp)) +
geom_line() +
geom_line(aes(y = TransDesemp_Mod), color = "red")
STLextra<-DesempleoTS-smooth_vec(DesempleoTS,span = 0.2, degree = 2)
plot_ly( x = time(STLextra), y = STLextra, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'Tasa de Desempleo con tendencia STL extraída',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
tsibbleDesem<-as_tsibble(DesempleoTS)#Creando el objeto tsibble de la tasa de Desempleo, note que tiene periodo 1M
tsibbleDesem %>%
model(
STL(value ~ trend() +
season(window = "periodic"),
robust = TRUE)) %>%
components() %>%
autoplot()
###Diferenciando con base en el objeto ts
DiferenciaOrd<-diff(DesempleoTS)
plot_ly( x = time(DiferenciaOrd), y = DiferenciaOrd, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'Tasa de Desempleo sin tendencia(Diferencia Ordinaria, lag=1)',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
#plot(dlAirPass)
DescomProm=decompose(DesempleoTS)
plot(DescomProm)
ExtraProm=DesempleoTS-DescomProm$trend
plot_ly( x = time(ExtraProm), y = ExtraProm, type = 'scatter', mode = 'lines',color=I("red")) %>%
layout(title = 'Tasa de Desempleo con tendencia extraída (Promedio móvil)',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
acf(DesempleoTS,lag.max = length(DesempleoTS))
par(mfrow = c(2, 2))
acf(DesempNoLM,lag.max =100,main="Autocorrelación serie sin tendencia lineal")
acf(STLextra,lag.max =100,main="Autocorrelación serie sin tendencia STL")
acf(DiferenciaOrd,lag.max =100,main="Autocorrelación serie sin tendencia\npor diferencia ordinaria")
acf(ExtraProm[7:270],lag.max =100,main="Autocorrelación serie sin tendencia\npor promedio móvil")
#El gráfico de retardos se realiza con la serie con tendencia extraída
#Tendencia STL extraída
par(mar = c(3,2,3,2))
lag1.plot(STLextra, 12,corr=T)
#Tendencia extraída por diferencia ordinaria
par(mar = c(3,2,3,2))
lag1.plot(DiferenciaOrd, 12,corr=T)
#Tendencia extraída por promedio móvil
par(mar = c(3,2,3,2))
lag1.plot(ExtraProm[7:270], 12,corr=T)
pacf(DiferenciaOrd, 12)
#Tendencia STL extraída
TSstudio::ts_heatmap(STLextra,title = "Mapa de Calor - Tasa de Desempleo en Colombia(STL)")
#Tendencia extraída por promedio móvil
TSstudio::ts_heatmap(ExtraProm,title = "Mapa de Calor - Tasa de Desempleo en Colombia(Promedio móvil)")
#Tendencia extraída por diferencia ordinaria
TSstudio::ts_heatmap(DiferenciaOrd,title = "Mapa de Calor - Tasa de Desempleo en Colombia(Diferencia Ordinaria)")
monthplot(STLextra,main="Subseries(STL)")
monthplot(ExtraProm,main="Subseries(Promedio móvil)")
monthplot(DiferenciaOrd,main="Subseries(Diferencia Ordinaria)")
tsibbleDesem <- tsibbleDesem %>%
mutate(index = as.Date(index))
tsibbleDesem<-tsibbleDesem%>%mutate(Diferencia=value-lag(value))
tsibbleDesem %>%
na.omit() %>%
plot_seasonal_diagnostics(.date_var = index, .value = Diferencia, .feature_set = c("month.lbl"), .geom = "boxplot")
ggplot(tsibbleDesem %>%na.omit()|>
mutate(
Mes = str_c("Mes ", as.character(lubridate::month(index)))
), aes(x = Diferencia)) +
geom_density(aes(fill = Mes)) +
ggtitle("LosPass - Estimación de la densidad vía Kernel por mes") +
facet_grid(rows = vars(as.factor(Mes)))
#STL
PeriodgramadTra1=spectrum(as.numeric(STLextra),log='no')
ubicacion1=which.max(PeriodgramadTra1$spec)
#Promedio móvil
PeriodgramadTra2=spectrum(as.numeric(ExtraProm[7:270]),log='no')
ubicacion2=which.max(PeriodgramadTra2$spec)
#Diferencia ordinaria
PeriodgramadTra3=spectrum(as.numeric(DiferenciaOrd),log='no')
ubicacion3=which.max(PeriodgramadTra3$spec)
sprintf("El valor de la frecuencia donde se máximiza el periodograma para la serie con tendencia STL extraída es: %s",PeriodgramadTra1$freq[ubicacion1])
sprintf("El periodo correspondiente es aproximadamente: %s",1/PeriodgramadTra1$freq[ubicacion1])
sprintf("El valor de la frecuencia donde se máximiza el periodograma para la serie con tendencia extraída por promedio móvil es: %s",PeriodgramadTra2$freq[ubicacion2])
sprintf("El periodo correspondiente es aproximadamente: %s",1/PeriodgramadTra2$freq[ubicacion2])
sprintf("El valor de la frecuencia donde se máximiza el periodograma para la serie con tendencia extraída por diferencia ordinaria es: %s",PeriodgramadTra3$freq[ubicacion3])
sprintf("El periodo correspondiente es aproximadamente: %s",1/PeriodgramadTra3$freq[ubicacion3])
DiferTSibl<-as_tsibble(DiferenciaOrd)
DiferTSibl
###Explore diferentes valores de K
Modelo_serie_diff<-DiferTSibl|>model(
`Fourier1Desempleo`=ARIMA(value~fourier(K=4)+pdq(0, 0, 0) + PDQ(0, 0, 0))#En este caso se hace con tres componentes de Fourier
)
real_ajustado1<-DiferTSibl%>%left_join(fitted(Modelo_serie_diff,by=index))#%>%select(-.model)
plot_ly(x = time(DiferenciaOrd), y = DiferenciaOrd, type = 'scatter', mode = 'lines', color = I("red"), name = "Serie1") %>%
add_trace(y = real_ajustado1$.fitted, mode = 'lines', line = list(color = 'blue'), name = "Ajuste Armónico") %>%
layout(title = 'Tasa de Desempleo sin tendencia (Diferencia Ordinaria, lag=1)',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
#####Ajuste Dummy
ModeloDummy<-DiferTSibl|>model(
`DummyAirdiff`=ARIMA(value~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))
)
real_ajustado2<-DiferTSibl%>%left_join(fitted(ModeloDummy,by=index))#%>%select(-.model)
plot_ly(x = time(DiferenciaOrd), y = DiferenciaOrd, type = 'scatter', mode = 'lines', color = I("red"), name = "Serie1") %>%
add_trace(y = real_ajustado2$.fitted, mode = 'lines', line = list(color = 'blue'), name = "Ajuste Dummy") %>%
layout(title = 'Tasa de Desempleo sin tendencia (Diferencia Ordinaria, lag=1)',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
#### Varios modelos al mismo tiempo
ajuste_final_models<-DiferTSibl%>%model(
`Fourier1Airdiff`=ARIMA(value~fourier(K=1)+pdq(0, 0, 0) + PDQ(0, 0, 0)),#1 componente de Fourier
`Fourier2Airdiff`=ARIMA(value~fourier(K=2)+pdq(0, 0, 0) + PDQ(0, 0, 0)),#2 componente de Fourier
`Fourier3Airdiff`=ARIMA(value~fourier(K=3)+pdq(0, 0, 0) + PDQ(0, 0, 0)),#3 componente de Fourier
`Fourier4Airdiff`=ARIMA(value~fourier(K=4)+pdq(0, 0, 0) + PDQ(0, 0, 0)),#4 componente de Fourier
`DummyAirdiff`=ARIMA(value~season()+pdq(0, 0, 0) + PDQ(0, 0, 0))#Ajuste dummy
)
glance(ajuste_final_models)
Modelo_serie_diff_models<-DiferTSibl%>%left_join(fitted(ajuste_final_models)|>group_by(.model)%>%
pivot_wider(names_from = .model, values_from = .fitted))
plot_ly(x = time(DiferenciaOrd), y = DiferenciaOrd, type = 'scatter', mode = 'lines', color = I("red"), name = "SerieDifOrd") %>%
add_trace(y = Modelo_serie_diff_models$Fourier1Airdiff, mode = 'lines', line = list(color = 'blue'), name = "Fourier1") %>%
add_trace(y = Modelo_serie_diff_models$Fourier2Airdiff, mode = 'lines', line = list(color = 'green'), name = "Fourier2") %>%
add_trace(y = Modelo_serie_diff_models$Fourier3Airdiff, mode = 'lines', line = list(color = 'yellow'), name = "Fourier3") %>%
add_trace(y = Modelo_serie_diff_models$Fourier4Airdiff, mode = 'lines', line = list(color = '#00CD66'), name = "Fourier4") %>%
add_trace(y = Modelo_serie_diff_models$DummyAirdiff, mode = 'lines', line = list(color = 'purple'), name = "Dummy") %>%
layout(title = 'Tasa de Desempleo sin tendencia (Diferencia Ordinaria, lag=1)',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
plot_ly(x = time(DiferenciaOrd), y = DiferenciaOrd, type = 'scatter', mode = 'lines', color = I("red"), name = "SerieDifOrd") %>%
add_trace(y = DiferenciaOrd-Modelo_serie_diff_models$Fourier1Airdiff, mode = 'lines', line = list(color = 'blue'), name = "Fourier1") %>%
add_trace(y = DiferenciaOrd-Modelo_serie_diff_models$Fourier2Airdiff, mode = 'lines', line = list(color = 'green'), name = "Fourier2") %>%
add_trace(y = DiferenciaOrd-Modelo_serie_diff_models$Fourier3Airdiff, mode = 'lines', line = list(color = 'yellow'), name = "Fourier3") %>%
add_trace(y = DiferenciaOrd-Modelo_serie_diff_models$Fourier4Airdiff, mode = 'lines', line = list(color = '#00CD66'), name = "Fourier4") %>%
add_trace(y = DiferenciaOrd-Modelo_serie_diff_models$DummyAirdiff, mode = 'lines', line = list(color = 'purple'), name = "Dummy") %>%
layout(title = 'Tasa de Desempleo sin tendencia y estacionalidad (Diferencia Ordinaria, lag=1)',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
par(mfrow = c(2, 2))
acf(DiferenciaOrd-Modelo_serie_diff_models$Fourier2Airdiff,lag.max =100,main="Autocorrelación serie sin componentes\n(F2)")
acf(DiferenciaOrd-Modelo_serie_diff_models$Fourier3Airdiff,lag.max =100,main="Autocorrelación serie sin componentes\n(F3)")
acf(DiferenciaOrd-Modelo_serie_diff_models$Fourier4Airdiff,lag.max =100,main="Autocorrelación serie sin componentes\n(F4)")
acf( DiferenciaOrd-Modelo_serie_diff_models$DummyAirdiff,lag.max =100,main="Autocorrelación serie sin componentes\n(Dummy)")
HWAP_inic=stats::HoltWinters(DesempleoTS,alpha=NULL,beta=FALSE,gamma=FALSE)
plot(HWAP_inic)
HWAP_inic
plot(forecast::forecast(HWAP_inic,h=12,level =0.95,lambda = 1))
Train=ts(DesempleoTS[1:221], start = c(2001, 1),frequency = 12)
Test=ts(DesempleoTS[222:276],start=c(2019,6),frequency = 12)
HWAP=stats::HoltWinters(Train,seasonal="additive")
plot_ly(x = time(DesempleoTS[13:221]), y = DesempleoTS[13:221], type = 'scatter', mode = 'lines', color = I("red"), name = "Original") %>%
add_trace(y = HWAP$fitted[,1], mode = 'lines', line = list(color = 'blue'), name = "EWMA") %>%
layout(title = 'Suavizamiento Exponencial',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
ajustados=fitted(HWAP)#Guarda las estimaciones que hace el modelo para cada mes desde enero de 2002 hasta mayo de 2019
plot(ajustados)#Gráfico de las tres componentes, nivel, pendiente y estacionalidad
HWAP
predictionHWAP_1=forecast::forecast(HWAP,h=55,level =0.95,lambda = 1) ### Cambié lambda a 1
predictionHWAP_1
plot(predictionHWAP_1)#Gráfico con pronósticos de los próximos 12 meses
mean((Test-predictionHWAP_1$mean)^2)
plot_ly(x = time(Test), y = Test, type = 'scatter', mode = 'lines', color = I("red"), name = "TasaDesempleo") %>%
add_trace(y = predictionHWAP_1$mean, mode = 'lines', line = list(color = 'blue'), name = "Predicciones") %>%
layout(title = 'Tasa de Desempleo vs Predicciones (Junio 2019-Diciembre 2023)',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
trunc(length(DesempleoTS)*0.80)+1
?trunc
time(DesempleoTS)
?window
h=1
lserie=length(DesempleoTS)
ntrain=trunc(length(DesempleoTS)*0.80)+1 ##% del datos en el conjunto de entrenamiento es del 80%.
ntrain
time(DesempleoTS)
time(DesempleoTS)[ntrain]###Me entrega la ultima fecha de la posición ntrain
train=window(DesempleoTS,end=time(DesempleoTS)[ntrain])
test=window(DesempleoTS,start=time(DesempleoTS)[ntrain]+1/12)##1/12 porque es la fracción que corresponde a un mes
train
length(train)
ntest=length(test)
ntest ##Me define el valor de origins, o de ventanas de rolling.
lserie ### Comparar los valores
fchstepahe=matrix(0,nrow=ntest,ncol=h) ##Crea una Columna para los h-pasos adelante
### verval contiene los verdaderos valores de la serie en el conjunto de prueba con los que se compararán los pronósticos.
verval=cbind(test[1:ntest])
View(verval)
#verval=cbind(test[1:ntest],c(test[2:ntest],NA),c(test[3:ntest],NA,NA))
####Ajuste del modelo con los datos de entrenamiento
HWAP_train=stats::HoltWinters(train,seasonal="additive")
HWAP_train$alpha
HWAP_train$beta
HWAP_train$gamma
###Observación: Note que que esos son las estimaciones de los parámetros de suavizamiento. Se puede también hacer una grilla de valores para explorar si hay unos valores mejores.
# por ejemplo como sigue:
require(utils)
suav_inputs=cbind(seq(0.001,0.999,0.1),seq(0.001,0.999,0.1),seq(0.001,0.999,0.1))
?seq()
View(suav_inputs)
colnames(suav_inputs)<-c("alpha","beta","gamma")
suav_inputs_tbl=tibble::as_tibble(suav_inputs)
grilla_suav=expand.grid(alpha=suav_inputs_tbl$alpha,beta=suav_inputs_tbl$beta,gamma=suav_inputs_tbl$gamma) ##Grilla de Valores
View(grilla_suav)
{
x=window(DesempleoTS,end=time(DesempleoTS)[ntrain]+(i-1)/12)
print(length(x))
refit=stats::HoltWinters(x,seasonal="additive",alpha=HWAP_train$alpha,beta=HWAP_train$beta,gamma=HWAP_train$gamma)
fchstepahe[i,]=as.numeric(forecast::forecast(refit,h=h)$mean)
}
####Se crean las ventanas de rolling y se obtiene los h-pronósticos para cada ventana(hay ntest posibles ventanas)
for(i in 1:(ntest))
####Se crean las ventanas de rolling y se obtiene los h-pronósticos para cada ventana(hay ntest posibles ventanas)
for(i in 1:(ntest)){
x=window(DesempleoTS,end=time(DesempleoTS)[ntrain]+(i-1)/12)
print(length(x))
refit=stats::HoltWinters(x,seasonal="additive",alpha=HWAP_train$alpha,beta=HWAP_train$beta,gamma=HWAP_train$gamma)
fchstepahe[i,]=as.numeric(forecast::forecast(refit,h=h)$mean)
}
####Se crean las ventanas de rolling y se obtiene los h-pronósticos para cada ventana(hay ntest posibles ventanas)
for(i in 1:(ntest)){
x=window(DesempleoTS,end=time(DesempleoTS)[ntrain]+(i-1)/12)
print(length(x))
refit=stats::HoltWinters(x,seasonal="additive",alpha=HWAP_train$alpha,beta=HWAP_train$beta,gamma=HWAP_train$gamma)
fchstepahe[i,]=as.numeric(forecast::forecast(refit,h=h)$mean)
}
fchstepahe
errores_pred=verval -fchstepahe ##Observación: debo devolver los pronósticos y los verdaderos valores a la escala original si es necesario.
ECM=apply(errores_pred^2,MARGIN = 2,mean,na.rm=TRUE) ##Acá se computa la medida de precisión del pronóstico(en este caso ECM).
RECM=sqrt(ECM) ##Se le saca raíz
#RECM ##se lee: Primera fila RECM 1-paso adelante y así sucesivamente.
ECM
plot_ly(x = time(Test), y = Test, type = 'scatter', mode = 'lines', color = I("red"), name = "TasaDesempleo") %>%
add_trace(y = fchstepahe, mode = 'lines', line = list(color = 'blue'), name = "Predicciones") %>%
layout(title = 'Tasa de Desempleo vs Predicciones (Junio 2019-Diciembre 2023)',
xaxis = list(title = 'Mes', rangeslider = list(type = 'date')))
library(forecast)
library(greybox)
HWAP_train=stats::HoltWinters(train,seasonal="additive")
?ro
h=1
ourCallETS <- "forecast::forecast(stats::HoltWinters(x=data,alpha=HWAP_train$alpha,beta=HWAP_train$beta,gamma=HWAP_train$gamma),h=h,level=95)"
###Note que x=data es solo un argumento indeterminado.
ourValueETS <- c("mean","lower","upper")
origins=ntest   ##número de rolling windows
Valoresretornados1 <- ro(DesempleoTS, h=h, origins=origins, call=ourCallETS, value=ourValueETS,ci=FALSE,co=FALSE)
t(Valoresretornados1$holdout)## Permiten verificar los verdaderos valores h-pasos adelante.
apply((Valoresretornados1$holdout -Valoresretornados1$mean)^2,1,mean,na.rm=TRUE) ### Se calcula el error cuadrático medio de predicción
DesempleoTS
